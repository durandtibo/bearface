name: Nightly Package Tests
on:
  schedule:
    - cron: '30 10 * * *' # run at 10:30 AM UTC
  workflow_dispatch:  # to trigger manually

jobs:
  package:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install hya

      - name: Run short experiment
        run: |
          python -c "import hya; from omegaconf import OmegaConf; " \
            "print(hya.registry.registry.state); " \
            "assert not hya.imports.is_torch_available(); " \
            "assert OmegaConf.create({'key': '\${hya.add:1,4}'}).key == 5"


  package-all:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install "hya[all]"

      - name: Run short experiment
        run: |
          python -c "import hya; from omegaconf import OmegaConf; import torch; " \
            "print(hya.registry.registry.state); " \
            "assert hya.imports.is_torch_available(); " \
            "assert OmegaConf.create({'key': '\${hya.to_tensor:1.42}'}).key.equal(torch.tensor(1.42))"


  package-omegaconf:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]
        omegaconf-version: [ 2.3.0, 2.2.3, 2.1.2 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install hya

      - name: Install OmegaConf
        run: |
          pip install omegaconf==${{ matrix.omegaconf-version }}

      - name: Run short experiment
        run: |
          python -c "import hya; from omegaconf import OmegaConf; " \
            "print(hya.registry.registry.state); " \
            "assert not hya.imports.is_torch_available(); " \
            "assert OmegaConf.create({'key': '\${hya.add:1,4}'}).key == 5"


  package-pytorch:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]
        pytorch-version: [ 2.0.0, 1.13.1, 1.12.1, 1.11.0, 1.10.0 ]
        exclude:
          - pytorch-version: 1.10.0
            python-version: 3.10
          - pytorch-version: 1.10.0
            python-version: 3.11
          - pytorch-version: 1.11.0
            python-version: 3.11
          - pytorch-version: 1.12.1
            python-version: 3.11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install hya torch==${{ matrix.pytorch-version }}

      - name: Run short experiment
        run: |
          python -c "import hya; from omegaconf import OmegaConf; import torch; " \
            "print(hya.registry.registry.state); " \
            "assert hya.imports.is_torch_available(); " \
            "assert OmegaConf.create({'key': '\${hya.to_tensor:1.42}'}).key.equal(torch.tensor(1.42))"
